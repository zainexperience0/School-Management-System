// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//admin is teacher can create students, lectures, classes and tasks
//normal user is student
// class have lectures, lectures have tasks, lectures have content,start time and end time
// students have fees=> hav emonthly scenario
// students have guardian => optional
// students have class

// ------------------------------------------ Normal models fo normal data managements
model Teacher {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String
  password      String
  qualification String
  phone         String
  address       String
  image         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Student {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  regId       String
  name        String
  email       String
  password    String
  phone       String
  gender      String
  address     String
  image       String
  socialLinks String[] //to do
  education   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  guardian    Guardian?

  classes ClassToStudent[]
}

model Class {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  descriptiton String
  image        String
  duration     Int //month from start date
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  lectures     Lecture[]
  students     ClassToStudent[]
}

model Lecture {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classId   String   @db.ObjectId
  duration  Int //hours from start date
  name      String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]
}

model Task {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  content           String
  delieveryCreteria String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lecture           Lecture  @relation(fields: [lectureId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lectureId         String   @db.ObjectId

  taskCompleted TaskCompleted[]
}

// ----------------------------------------------------  Relational models

model Guardian {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  relation  String
  phone     String
  address   String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId String  @unique @db.ObjectId
}

model ClassToStudent {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  start        DateTime
  end          DateTime
  student      Student  @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId    String   @db.ObjectId
  class        Class    @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classId      String   @db.ObjectId
  progress     Int      @default(0)
  feeSubmitted Fee[]

  lectureCompleted LectureCompleted[]

  joinDate  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LectureStatus {
  COMPLETED
  IN_COMPLETE
  IN_PROGRESS
}

model LectureCompleted {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  status           LectureStatus   @default(IN_PROGRESS)
  start            DateTime
  end              DateTime
  classToStudent   ClassToStudent? @relation(fields: [classToStudentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classToStudentId String?         @db.ObjectId
  taskCompleted    TaskCompleted[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

enum TaskStatus {
  COMPLETED
  IN_COMPLETE
  APPROVED
  NOT_APPROVED
}

model TaskCompleted {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  Task               Task             @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  taskId             String           @db.ObjectId
  status             TaskStatus       @default(IN_COMPLETE)
  lectureCompleted   LectureCompleted @relation(fields: [lectureCompletedId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lectureCompletedId String           @db.ObjectId
  comment            String
  delivery           String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

enum FeeStatus {
  SUBMITTED
  NOT_SUBMITTED
  LATE_SUBMITTED
}

model Fee {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  total            Int
  month            String
  dueDate          DateTime
  submittedDate    DateTime
  status           FeeStatus       @default(NOT_SUBMITTED)
  classToStudent   ClassToStudent? @relation(fields: [classToStudentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classToStudentId String?         @db.ObjectId
}

// -----------------------------------------------------------
