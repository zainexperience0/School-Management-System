// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  username  String
  email     String
  password  String
  phone     String
  address   String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Teacher {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  username      String
  email         String
  password      String
  phone         String
  address       String
  salary        Int
  qualification String
  image         String
  tasks         Tasks[]
  hireDate      DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum Status {
  PENDING
  COMPLETED
  CANCELED
  INPROGRESS
}

model Tasks {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  dueDate     DateTime @default(now())
  status      Status   @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  studentId   String   @db.ObjectId
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teacherId   String   @db.ObjectId
  teacher     Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Class {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  students Student[]
  lectures Lectures[]
}

model Student {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  password  String
  dob       DateTime
  address   String
  phone     String
  gender    String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Tasks[]
  classId   String   @db.ObjectId
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Lectures {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  content String
  classId String @db.ObjectId
  class   Class  @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
